*********************************************Util***************************************
package domProject;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
//对文件的读写操作
public class Utils {
		//获取dom树
	public static Document getDocument()
	{
		try {
			DocumentBuilder db=DocumentBuilderFactory.newInstance().newDocumentBuilder();
			Document document=db.parse("src/exam.xsl");
			return document;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	public static void writeXML(Document document)
	{
		//创建transformer对象
		try {
			Transformer tf=TransformerFactory.newInstance().newTransformer();
			try {
				tf.transform(new DOMSource(document), new StreamResult("src/exam.xsl"));
			} catch (TransformerException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			};
		} catch (TransformerConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (TransformerFactoryConfigurationError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

********************************************Util******************************************************
******************************************StudentDao******************************************
package domProject;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

//业务逻辑处理类
public class StudentDao {
	public boolean add(Student stu)
	{
		//加载Dom树
		Document document=Utils.getDocument();
		//拿到根结点
		Element root=document.getDocumentElement();
		//创建student结点
		Element stuEl=document.createElement("student");
		stuEl.setAttribute("examid", stu.getExamid());
		stuEl.setAttribute("idcard", stu.getIdcard());
		Element name=document.createElement("name");
		Element address=document.createElement("address");
		Element grade=document.createElement("grade");
		name.setTextContent(stu.getName());
		address.setTextContent(stu.getAddress());
		grade.setTextContent(stu.getGrade()+"");//转化为字符串
		stuEl.appendChild(name);
		stuEl.appendChild(address);
		stuEl.appendChild(grade);
		root.appendChild(stuEl);
		Utils.writeXML(document);
		return true;
	}
	public boolean delete(String name)
	{
		String a=name;
		//加载dom树
		Document document=Utils.getDocument();
		//获取所有的name结点
		NodeList nl=document.getElementsByTagName("name");
		for(int i=0;i<nl.getLength();i++)
		{
			Node n=nl.item(i);
			if((n.getTextContent()).equals(name));
			{
				System.out.println("找到"+n.getTextContent()+":"+a+"正在删除。。。。。。");
				n.getParentNode().getParentNode().removeChild(n.getParentNode());
				System.out.println("已经删除。");
				Utils.writeXML(document);
				return true;
			}
		}
		return false;
	}
	public Student findByExamId(String examid)
	{
		Document document=Utils.getDocument();
		NodeList nl=document.getElementsByTagName("student");
		for(int i=0;i<nl.getLength();i++)
		{
			Element stuNode=(Element)nl.item(i);
			if(stuNode.getAttribute("examid").equals(examid))
			{
				Student s=new Student();
				s.setExamid(examid);
				s.setIdcard(stuNode.getAttribute("idcard"));
				s.setName(stuNode.getElementsByTagName("name").item(0).getTextContent());
				s.setAddress(stuNode.getElementsByTagName("address").item(0).getTextContent());
				s.setGrade(Float.parseFloat(stuNode.getElementsByTagName("grade").item(0).getTextContent()));
				return s;
			}
		}
		return null;
	}
}
*********************************************************Student*************************************
package domProject;

public class Student {
		private String name;
		private String examid;
		private String idcard;
		private String address;
		private float grade;
		@Override
		public String toString() {
			return "Student [name=" + name + ", examid=" + examid + ", idcard="
					+ idcard + ", address=" + address + ", grade=" + grade
					+ "]";
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public String getExamid() {
			return examid;
		}
		public void setExamid(String examid) {
			this.examid = examid;
		}
		public String getIdcard() {
			return idcard;
		}
		public void setIdcard(String idcard) {
			this.idcard = idcard;
		}
		public String getAddress() {
			return address;
		}
		public void setAddress(String address) {
			this.address = address;
		}
		public float getGrade() {
			return grade;
		}
		public void setGrade(float grade) {
			this.grade = grade;
		}
}
*****************************************Student*************************************************
******************************************UI***************************************
package domProject;

import java.util.Scanner;

public class studentUI {
	static Scanner scan=new Scanner(System.in);
	static StudentDao sd=new StudentDao();
	public static void main(String[] args) {
		
		System.out.println("请选择操作: a)添加学生   b)查询学生  c)删除学生");
		String op=scan.next();
		if("a".equalsIgnoreCase(op))
		{
			addStudent();
		}
		else if("b".equalsIgnoreCase(op))
		{
			findStudentByExamId();
		}
		else if("c".equalsIgnoreCase(op))
		{
			removeStudentByName();
		}
		else
		{
			System.out.println("没有此中操作");
		}
		
	}
	private static void removeStudentByName() {
		System.out.println("请输入学生的姓名");
		String name=scan.next();
		boolean flag=sd.delete(name);
		if(flag)
		{
			System.out.println("-----删除成功--------");
		}
		else
		{
			System.out.println("删除失败");
		}
	}

	private static void findStudentByExamId() {
		
		System.out.println("请输入准考证号:");
		String examid=scan.next();
		Student stu=sd.findByExamId(examid);
		if(stu!=null)
		{
			System.out.println(stu);
		}
		else
		{
			System.out.println("此学生不存在");
		}
	}

	private static void addStudent() {
		
		Student s=new Student();
		System.out.println("请输入姓名:");
		String name=scan.next();
		s.setName(name);
		
		System.out.println("请输入身份证号:");
		String idcard=scan.next();
		s.setIdcard(idcard);
		
		System.out.println("请输入准考证号:");
		String examid=scan.next();
		s.setExamid(examid);
		
		System.out.println("请输入地址:");
		String address=scan.next();
		s.setAddress(address);
		
		System.out.println("请输入分数:");
		String grade=scan.next();
		s.setGrade(Float.parseFloat(grade));
		
		boolean flag=sd.add(s);
		if(flag)
		{
			System.out.println("添加成功");
		}
		else
		{
			System.out.println("添加失败");
		}
	}
}



